import streamlit as st
import pandas as pd
import plotly.express as px

# Configuration de la page Streamlit
st.set_page_config(page_title="Analyse des Avis Clients", page_icon="ğŸ“Š", layout="wide")

@st.cache_data
def load_data():
    """Charge les donnÃ©es depuis le fichier JSON"""
    df = pd.read_json("Prediction/dashboard_data.json")
    return df

# Charger les donnÃ©es
df = load_data()

# VÃ©rifier si le DataFrame est vide
if df.empty:
    st.error("Le fichier JSON est vide ou n'a pas pu Ãªtre chargÃ©.")
    st.stop()

# âœ… Ajouter un filtre par marque dans la sidebar
marque_selectionnee = st.sidebar.selectbox(
    "SÃ©lectionner une marque :", 
    options=df["marque"].unique(),
    index=0
)

# Filtrer les donnÃ©es selon la marque sÃ©lectionnÃ©e
df_filtered = df[df["marque"] == marque_selectionnee]

st.title(f"ğŸ“Š Dashboard d'Analyse des Avis Clients - {marque_selectionnee}")

# Afficher un rÃ©sumÃ© des donnÃ©es filtrÃ©es
st.subheader("ğŸ“‹ Informations gÃ©nÃ©rales")
col1, col2, col3 = st.columns(3)
col1.metric("Nombre total d'avis", df_filtered.shape[0])
col2.metric("Trust Score Moyen", round(df_filtered["trust_score"].mean(), 2))
col3.metric("Note Moyenne", round(df_filtered["rating"].mean(), 2))

# ğŸ“Œ **Distribution des avis par note (rating)**
st.subheader("ğŸ“Š Distribution des Avis par Note")
fig_rating = px.histogram(
    df_filtered, x="rating", nbins=5, labels={"rating": "Note"},
    title="RÃ©partition des Avis Clients", color_discrete_sequence=["#636EFA"]
)
st.plotly_chart(fig_rating, use_container_width=True)

# ğŸ“Œ **Ã‰volution des avis dans le temps**
st.subheader("ğŸ“… Ã‰volution des Avis au Fil du Temps")
df_filtered["review_date"] = pd.to_datetime(df_filtered["review_date"], errors="coerce")
df_time_series = df_filtered.groupby("review_date").size().reset_index(name="Nombre d'avis")

fig_time_series = px.line(
    df_time_series, x="review_date", y="Nombre d'avis", markers=True,
    title="Tendance des Avis Clients",
    color_discrete_sequence=["#EF553B"]
)
st.plotly_chart(fig_time_series, use_container_width=True)

# ğŸ“Œ **Analyse des catÃ©gories de rÃ©ponse (Si disponible)**
if "cat_response" in df_filtered.columns:
    st.subheader("ğŸ“§ CatÃ©gories de RÃ©ponses des Entreprises")
    fig_response = px.histogram(
        df_filtered, x="cat_response", title="RÃ©partition des RÃ©ponses",
        color_discrete_sequence=["#00CC96"]
    )
    st.plotly_chart(fig_response, use_container_width=True)
